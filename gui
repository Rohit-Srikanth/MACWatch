import tkinter as tk
from tkinter import messagebox, ttk
import threading
import subprocess
import os
import sys
import time
from datetime import datetime

victim_ip = ""
router_ip = ""
detection_log = []

def run_spoofer():
    global victim_ip, router_ip
    try:
        if not victim_ip or not router_ip:
            messagebox.showwarning("Missing IPs", "Please enter Victim and Router IPs.")
            return
        status_label.config(text=f"[+] Spoofing {victim_ip} pretending to be {router_ip}...", fg="lightgreen")
        subprocess.run([sys.executable, "MACWatch/spoof/arp_spoofer.py", victim_ip, router_ip])
    except Exception as e:
        messagebox.showerror("Error", str(e))

def run_detector():
    try:
        status_label.config(text="[+] Detection started... Press Stop to end.", fg="skyblue")
        from MACWatch.utils.netwatch import get_arp_table
        old_table = get_arp_table()
        while True:
            time.sleep(3)
            new_table = get_arp_table()
            for ip, mac in new_table.items():
                if ip in old_table and old_table[ip] != mac:
                    log = f"[{datetime.now().strftime('%H:%M:%S')}] Spoof detected! {ip} changed from {old_table[ip]} to {mac}"
                    detection_log.append(log)
                    log_list.insert(tk.END, log)
                    log_list.yview(tk.END)
            old_table = new_table
    except Exception as e:
        messagebox.showerror("Error", str(e))

def stop_spoofer():
    if os.name == 'nt':
        os.system("taskkill /f /im python.exe >nul 2>&1")
    else:
        os.system("pkill -f arp_spoofer.py")
    status_label.config(text="[-] Spoofer stopped.", fg="orange")

def stop_detector():
    if os.name == 'nt':
        os.system("taskkill /f /im python.exe >nul 2>&1")
    else:
        os.system("pkill -f arp_detector.py")
    status_label.config(text="[-] Detector stopped.", fg="orange")

def stop_all():
    if os.name == 'nt':
        os.system("taskkill /f /im python.exe >nul 2>&1")
    else:
        os.system("pkill -f arp_spoofer.py")
        os.system("pkill -f arp_detector.py")
    status_label.config(text="[-] All scripts stopped.", fg="red")
    app.quit()

def start_spoofer_thread():
    global victim_ip, router_ip
    victim_ip = victim_ip_entry.get()
    router_ip = router_ip_entry.get()
    threading.Thread(target=run_spoofer, daemon=True).start()

def start_detector_thread():
    threading.Thread(target=run_detector, daemon=True).start()

app = tk.Tk()
app.title("MACWatch - ARP Spoofing & Detection")
app.geometry("620x500")
app.configure(bg="#2d2a4a")

title_label = tk.Label(app, text="MACWatch", font=("Segoe UI", 22, "bold"), bg="#2d2a4a", fg="#98fb98")
title_label.pack(pady=12)

status_label = tk.Label(app, text="[!] Idle", font=("Segoe UI", 11), fg="lightgray", bg="#2d2a4a")
status_label.pack(pady=5)

ip_frame = tk.Frame(app, bg="#2d2a4a")
ip_frame.pack(pady=8)

victim_label = tk.Label(ip_frame, text="Victim IP:", font=("Segoe UI", 10), bg="#2d2a4a", fg="white")
victim_label.grid(row=0, column=0, padx=5)
victim_ip_entry = tk.Entry(ip_frame, font=("Segoe UI", 10), width=18)
victim_ip_entry.grid(row=0, column=1, padx=5)

router_label = tk.Label(ip_frame, text="Router IP:", font=("Segoe UI", 10), bg="#2d2a4a", fg="white")
router_label.grid(row=0, column=2, padx=5)
router_ip_entry = tk.Entry(ip_frame, font=("Segoe UI", 10), width=18)
router_ip_entry.grid(row=0, column=3, padx=5)

btn_frame = tk.Frame(app, bg="#2d2a4a")
btn_frame.pack(pady=10)

spoofer_btn = tk.Button(btn_frame, text="Start Spoofer", font=("Segoe UI", 10), width=16, command=start_spoofer_thread, bg="#4b0082", fg="white", activebackground="#6a0dad")
spoofer_btn.grid(row=0, column=0, padx=10)

detector_btn = tk.Button(btn_frame, text="Start Detector", font=("Segoe UI", 10), width=16, command=start_detector_thread, bg="#5a189a", fg="white", activebackground="#7b2cbf")
detector_btn.grid(row=0, column=1, padx=10)

stop_frame = tk.Frame(app, bg="#2d2a4a")
stop_frame.pack(pady=10)

stop_spoofer_btn = tk.Button(stop_frame, text="Stop Spoofer", font=("Segoe UI", 10), width=14, command=stop_spoofer, bg="#994d00", fg="white", activebackground="#cc6600")
stop_spoofer_btn.grid(row=0, column=0, padx=10)

stop_detector_btn = tk.Button(stop_frame, text="Stop Detector", font=("Segoe UI", 10), width=14, command=stop_detector, bg="#994d00", fg="white", activebackground="#cc6600")
stop_detector_btn.grid(row=0, column=1, padx=10)

stop_all_btn = tk.Button(app, text="Stop All & Exit", font=("Segoe UI", 10), width=28, command=stop_all, bg="#800020", fg="white", activebackground="#a4133c")
stop_all_btn.pack(pady=10)

log_label = tk.Label(app, text="Live ARP Detection Log:", font=("Segoe UI", 10, "bold"), bg="#2d2a4a", fg="white")
log_label.pack(pady=(10, 2))

log_list = tk.Listbox(app, font=("Segoe UI", 9), bg="#1e1b2d", fg="white", width=70, height=10)
log_list.pack(pady=5)

app.mainloop()
